#
SET(SANITIZER "<NONE>" CACHE STRING "Sanitizer chosen by the user at CMake configure time")
SET_PROPERTY(CACHE SANITIZER PROPERTY STRINGS <NONE> ASAN MSAN TSAN UBSAN)
#
#
OPTION(STRICT_FLAGS "Turn on a lot of compiler warnings" ON)
OPTION(NATIVE_CPU "Strictly bind the binary to current CPU" OFF)
#
IF(DEVELOPER_MODE)
#
  SET(NATIVE_CPU OFF)
  SET(STRICT_FLAGS ON)
  SET(CMAKE_BUILD_TYPE "Debug")
  SET(CMAKE_VERBOSE_MAKEFILE ON)
#
  MESSAGE(STATUS "<DEVELOPER MODE> -> NATIVE_CPU=${NATIVE_CPU}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> STRICT_FLAGS=${STRICT_FLAGS}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> SANITIZER=${SANITIZER}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> CMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> WITH_MYSQL=${WITH_MYSQL}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> WITH_PGSQL=${WITH_PGSQL}")
  MESSAGE(STATUS "<DEVELOPER MODE> -> WITH_MONGO=${WITH_MONGO}")
  MESSAGE(STATUS "==> Please note, any *SAN options must be defined explicitly!")
#
  MESSAGE("Your CMake version supports these C++ features:")
  GET_PROPERTY(KNOWN_FEATURES GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
  FOREACH(i ${KNOWN_FEATURES})
    MESSAGE("${i}")
  ENDFOREACH()
ENDIF(DEVELOPER_MODE)
#
INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckCXXCompilerFlag)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)
#
#
IF(SANITIZER MATCHES "ASAN")
  SET(ASAN_FLAGS "-fsanitize=address")
  SET(CMAKE_REQUIRED_FLAGS ${ASAN_FLAGS})
  CHECK_CXX_COMPILER_FLAG("" ASAN_CXX_OK)
  IF(ASAN_CXX_OK)
    ADD_DEFINITIONS(${ASAN_FLAGS})
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${ASAN_FLAGS}")
  ELSE()
    MESSAGE(FATAL_ERROR "ASAN is not supported by ${CMAKE_CXX_COMPILER}")
  ENDIF()
ENDIF()
#
IF(SANITIZER MATCHES "MSAN")
  SET(MSAN_FLAGS "-fsanitize=memory")
  SET(CMAKE_REQUIRED_FLAGS ${MSAN_FLAGS})
  CHECK_CXX_COMPILER_FLAG("" MSAN_CXX_OK)
  IF(MSAN_CXX_OK)
    ADD_DEFINITIONS(${MSAN_FLAGS})
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSAN_FLAGS}")
  ELSE()
    MESSAGE(FATAL_ERROR "MSAN is not supported by ${CMAKE_CXX_COMPILER}")
  ENDIF()
ENDIF()
#
IF(SANITIZER MATCHES "TSAN")
  SET(TSAN_FLAGS "-fsanitize=thread")
  SET(CMAKE_REQUIRED_FLAGS ${TSAN_FLAGS})
  CHECK_CXX_COMPILER_FLAG("" TSAN_CXX_OK)
  IF(TSAN_CXX_OK)
    ADD_DEFINITIONS(${TSAN_FLAGS})
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${TSAN_FLAGS}")
  ELSE()
    MESSAGE(FATAL_ERROR "TSAN is not supported by ${CMAKE_CXX_COMPILER}")
  ENDIF()
ENDIF()
#
IF(SANITIZER MATCHES "UBSAN")
  SET(UBSAN_FLAGS "-fsanitize=undefined")
  SET(CMAKE_REQUIRED_FLAGS ${UBSAN_FLAGS})
  CHECK_CXX_COMPILER_FLAG("" UBSAN_CXX_OK)
  IF(UBSAN_CXX_OK)
    ADD_DEFINITIONS(${UBSAN_FLAGS})
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${UBSAN_FLAGS}")
  ELSE()
    MESSAGE(FATAL_ERROR "UBSAN is not supported by ${CMAKE_CXX_COMPILER}")
  ENDIF()
ENDIF()
#
IF((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i686|x86|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
  SET(ARCH "x86")
ELSEIF((CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 8))
  SET(ARCH "x86_64")
ELSEIF((CMAKE_SYSTEM_PROCESSOR MATCHES "i386") AND (CMAKE_SIZEOF_VOID_P EQUAL 8) AND (APPLE))
  # Mac is weird like that.
  SET(ARCH "x86_64")
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^arm*")
  SET(ARCH "ARM")
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "sparc")
  SET(ARCH "sparc")
ENDIF()
#
MESSAGE(STATUS "Host system is ${CMAKE_SYSTEM}-${ARCH}")
#
# Debug Release RelWithDebInfo MinSizeRel
IF(CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
#
IF(CMAKE_BUILD_TYPE STREQUAL "Release")
  SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
ENDIF()
#
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -ggdb3 -DDEBUG")
ENDIF()
##
#
IF(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  ADD_COMPILE_OPTIONS(-stdlib=libc++ -flto=thin)
ENDIF()
#
IF(NATIVE_CPU)
  ADD_COMPILE_OPTIONS(-march=native)
ENDIF()
#
IF(STRICT_FLAGS)
  ADD_COMPILE_OPTIONS(-Wall -Werror -Wextra -pedantic-errors -Wmissing-declarations)
ENDIF ()
##

#
#
